// Protocol Buffers for Saturnin
// Copyright 2019 Firebird Project.  All rights reserved.
// https://www.firebirdsql.org/
// https://saturnin.rtfd.io
//
// License: The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom
// the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package saturnin;

import "google/protobuf/any.proto";
// import "google/protobuf/struct.proto";
import public "saturnin/sdk/fbsp.proto";

// Address domain enumeration

enum AddressDomain {
  UNKNOWN_DOMAIN = 0 ; // Not a valid option, defined only to handle undefined values
  LOCAL = 1 ;          // Within process (inproc)
  NODE = 2 ;           // On single node (ipc or tcp loopback)
  NETWORK = 3 ;        // Network-wide (ip address or domain name)
}

// Transport protocol

enum TransportProtocol {
  UNKNOWN_PROTOCOL = 0 ; // Not a valid option, defined only to handle undefined values
  INPROC = 1 ;
  IPC = 2 ;
  TCP = 3 ;
  PGM = 4 ;
  EPGM = 5 ;
  VMCI = 6 ;
}

// Socket type

enum SocketType {
  UNKNOWN_TYPE = 0 ; // Not a valid option, defined only to handle undefined values
  DEALER = 1 ;
  ROUTER = 2 ;
  PUB = 3 ;
  SUB = 4 ;
  XPUB = 5 ;
  XSUB = 6 ;
  PUSH = 7 ;
  PULL = 8 ;
  STREAM = 9 ;
  PAIR = 10 ;
}

// Socket use

enum SocketUse {
  UNKNOWN_USE = 0 ; // Not a valid option, defined only to handle undefined values
  PRODUCER = 1 ;    // Socket used to provide data to peers
  CONSUMER = 2 ;    // Socket used to get data prom peers
  EXCHANGE = 3 ;    // Socket used for data exchange
}

// ZMQ endpoint address

message EndpointAddress {
  AddressDomain domain = 1 ;       // [required]
  TransportProtocol protocol = 2 ; // [required]
  string address = 3 ;             // [required]
}

// Dependency type enumeration

enum DependencyType {
  UNKNOWN_DEPTYPE = 0 ; // Not a valid option, defined only to handle undefined values
  REQUIRED = 1 ;
  PREFERRED = 2 ;
  OPTIONAL = 3 ;
}

// Dependency

message Dependency {
  DependencyType type = 1 ; // [required]
  bytes uid = 2 ;           // [required] Interface uid
}

// Interface

message RequestCode {
  uint32 code = 1 ; // [required]
  string name = 2 ; // [required]
}

message InterfaceDescriptor {
  bytes uid = 1 ;                     // [required] Interface ID (uuid5 - SHA1, namespace OID)
  string name = 2 ;                   // [required] Interface name
  uint32 revision = 3 ;               // [required] Revision number
  uint32 number = 4 ;                 // [required] Identification Number assigned by Service
  repeated RequestCode requests = 5 ; // [required] Request codes
}

// Installed service specification

message InstalledService {
  fbsp.AgentIdentification agent = 1 ;          // [required]
  repeated InterfaceDescriptor api = 2 ;        // [required]
  repeated Dependency dependencies = 3 ;        // List of dependencies
  repeated google.protobuf.Any supplement = 5 ; // additional information about service
}

// Data pipe

message DataPipe {
  string name = 1 ;                             // [required] Pipe name
  SocketType socket_type = 2 ;                  // [required] Socket type
  SocketUse use = 3 ;                           // [required] PRODUCER/CONSUMER
  string protocol = 4 ;                         // [required] Protocol description
  bytes owner = 5 ;                             // [required] if pipe is owned by Saturnin service
                                                // ID of the peer that owns the pipe
  uint32 pid = 6 ;                              // [required] ID of the process that manages the pipe
  string host = 7 ;                             // [required] host (network node) identification where the pipe resides
  repeated EndpointAddress endpoints = 8 ;      // [required] Binded endpoints
  repeated google.protobuf.Any supplement = 9 ; // additional information about pipe
}
